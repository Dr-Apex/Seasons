{"version":3,"sources":["SeasonDisplay.js","spinner.js","index.js","useLocation.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","ReactDOM","render","content","useState","setLat","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","document","querySelector"],"mappings":"qJAGMA,G,KAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,eAyBCE,EAbO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAID,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BZU,EAAU,SAAAP,GACd,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBACZN,EAAMQ,WAMfD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCqCfG,IAASC,OACP,mBAhDU,WAAO,IAGbC,EAHY,ECJH,WAAO,IAAD,EACGC,mBAAS,MADZ,mBACZZ,EADY,KACPa,EADO,OAEqBD,mBAAS,IAF9B,mBAEZE,EAFY,KAEEC,EAFF,KAWnB,OAPAC,qBAAU,WACRC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAcR,EAAOQ,EAASC,OAAOC,aACrC,SAACC,GAAD,OAAST,EAAgBS,EAAIjB,cAE9B,IAEI,CAACP,EAAKc,GDNeW,GADZ,mBACTzB,EADS,KACJc,EADI,KAYhB,OAPEH,EADCG,EACS,uCAAaA,GACdd,EACC,kBAAC,EAAD,CAAeA,IAAKA,IAEpB,kBAAC,EAAD,CAASO,QAAQ,sCAGtB,yBAAKF,UAAU,cAAcM,KAoCpC,MACAe,SAASC,cAAc,W","file":"static/js/main.2ba9735e.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hit the beach!\",\r\n    iconName: 'sun'\r\n  },\r\n  winter: {\r\n    text: 'Burr, it is chilly',\r\n    iconName: 'snowflake'\r\n  }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? 'summer' : 'winter';\r\n  } else {\r\n    return lat > 0 ? 'winter' : 'summer';\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = props => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const { text, iconName } = seasonConfig[season];\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from 'react';\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">\r\n        {props.message}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: 'Loading...'\r\n};\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './spinner';\r\nimport useLocation from './useLocation';\r\n\r\nconst App = () => {\r\n  const [lat, errorMessage] = useLocation();\r\n\r\n  let content;\r\n  if(errorMessage) {\r\n    content = <div>Error: {errorMessage}</div>;\r\n  } else if (lat) {\r\n    content = <SeasonDisplay lat={lat} />;\r\n  } else {\r\n    content = <Spinner message=\"Please accept location request...\" />;\r\n  }\r\n\r\n  return <div className=\"border red\">{content}</div>;\r\n};\r\n\r\n// class App extends React.Component {\r\n//\r\n//   state = { lat: null, errorMessage: '' };\r\n//\r\n//   componentDidMount() {\r\n//     window.navigator.geolocation.getCurrentPosition(\r\n//       (position) => this.setState({ lat: position.coords.latitude }),\r\n//       (err) => this.setState({ errorMessage: err.message })\r\n//     );\r\n//   }\r\n//\r\n//   renderContent() {\r\n//     if (this.state.errorMessage && !this.state.lat) {\r\n//       return <div>Error: {this.state.errorMessage}</div>;\r\n//     }\r\n//\r\n//     if (!this.state.errorMessage && this.state.lat) {\r\n//       return <SeasonDisplay lat={this.state.lat} />;\r\n//     }\r\n//\r\n//     return <Spinner message=\"Please accept location request...\" />;\r\n//   }\r\n//\r\n//   render() {\r\n//     return (\r\n//       <div className=\"border red\">\r\n//         {this.renderContent()}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.querySelector('#root')\r\n);\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default () => {\r\n  const [lat, setLat] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => setLat(position.coords.latitude),\r\n      (err) => setErrorMessage(err.message)\r\n    );\r\n  }, []);\r\n\r\n  return [lat, errorMessage];\r\n};\r\n"],"sourceRoot":""}